//========================================================================================================================================================
// Задание No1. Скопировать и отсортировать массив
// У нас есть массив строк arr. Нужно получить отсортированную копию, но оставить arr
// неизменённым.
// Создайте функцию copySorted(arr), которая будет возвращать такую копию.
// let arr = ["HTML", "JavaScript", "CSS"];
// let sorted = copySorted(arr);
// alert( sorted ); // CSS, HTML, JavaScript
// alert( arr ); // HTML, JavaScript, CSS (без изменений)

// let arr = ['HTML', 'JavaScript', 'CSS'];
// let sorted = copySorted(arr);

// function copySorted() {
// 	return arr.slice().sort();
// }

// alert(sorted);
// alert(arr);
//========================================================================================================================================================
// Задание No2. Трансформировать в массив имён
// У вас есть массив объектов user, и в каждом из них есть user.name. Напишите код,
// который преобразует их в массив имён.
// Например:
// let vasya = { name: "Вася", age: 25 };
// let petya = { name: "Петя", age: 30 };
// let masha = { name: "Маша", age: 28 };
// let users = [vasya, petya, masha];

// let userNames = users.map(item => item.name)
// alert(userNames);
//========================================================================================================================================================
// Задание No3. Получить средний возраст
// Напишите функцию getAverageAge(users), которая принимает массив объектов со
// свойством age и возвращает средний возраст.
// Формула вычисления среднего арифметического значения: (age1 + age2 + ... + ageN) /
// N.
// Например:
// let vasya = { name: 'Вася', age: 25 };
// let petya = { name: 'Петя', age: 30 };
// let masha = { name: 'Маша', age: 29 };
// let arr = [vasya, petya, masha];

// function getAverageAge(users) {
// 	return users.reduce((accum, item) => accum + item.age, 0) / users.length;
// }

// alert(getAverageAge(arr)); // (25 + 30 + 29) / 3 = 28
//========================================================================================================================================================
// Задание No4. Оставить уникальные элементы массива
// Пусть arr – массив строк.
// Напишите функцию unique(arr), которая возвращает массив, содержащий только
// уникальные элементы arr.
// Например:

// function unique(arr) {
// 	return [...new Set(arr)];
// }
// let strings = ['кришна', 'кришна', 'харе', 'харе', 'харе', 'харе', 'кришна', 'кришна', ':-O'];
// alert(unique(strings));
//========================================================================================================================================================
// Задание No5. Сумма с помощью замыканий
// Напишите функцию sum, которая работает таким образом: sum(a)(b) = a+b.
// Да, именно таким образом, используя двойные круглые скобки (не опечатка).
// Например:
// sum(1)(2) = 3
// sum(5)(-1) = 4

// function sum(a) {
//    return function(b) {
// 		return a + b
// 	}
// }
// alert(sum(1)(2));
//========================================================================================================================================================
// Задание No6. Фильтрация с помощью функции
// У нас есть встроенный метод arr.filter(f) для массивов. Он фильтрует все элементы с
// помощью функции f. Если она возвращает true, то элемент добавится в возвращаемый
// массив.
// Сделайте набор «готовых к употреблению» фильтров:
// • inBetween(a, b) – между a и b (включительно).
// • inArray([...]) – находится в данном массиве.
// Они должны использоваться таким образом:
// • arr.filter(inBetween(3,6)) – выбирает только значения между 3 и 6 (включительно).
// • arr.filter(inArray([1,2,3])) – выбирает только элементы, совпадающие с одним из
// элементов массива

// let arr = [1, 2, 3, 4, 5, 6, 7];

// function inBetween(a, b) {
// 	return function (с) {
// 		return с >= a && с <= b;
// 	};
// }

// alert(arr.filter(inBetween(3, 6)));

// function inArray(arr) {
// 	return function (elem) {
// 		return arr.includes(elem);
// 	};
// }

// alert(arr.filter(inArray([1, 2, 3])));
//========================================================================================================================================================
// Задание No7. Вычислить факториал
// Факториал натурального числа – это число, умноженное на "себя минус один", затем на
// "себя минус два", и так далее до 1. Факториал n обозначается как n!
// Определение факториала можно записать как:

// n! = n * (n - 1) * (n - 2) * ...*1

// Примеры значений для разных n:
// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.
// alert( factorial(5) ); // 120
// P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6

// function factorial(n) {
// 	if (n == 1) {
// 		return 1;
// 	}
// 	return n * factorial(n - 1);
// }

// alert(factorial(5));
//========================================================================================================================================================
// Задание No8. Числа Фибоначчи
// Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То
// есть, следующее число получается как сумма двух предыдущих.
// Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5,
// 8, 13, 21....
// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных
// явлений вокруг нас.
// Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.
// Пример работы:
// function fib(n) { /* ваш код */ }
// alert(fib(3)); // 2
// alert(fib(7)); // 13
// alert(fib(77)); // 5527939700884757
// P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77)
// должен занимать не более доли секунды.

// function fib(n) {
// 	let prev = 0,
// 		next = 1;
// 	for (let i = 0; i < n; i++) {
// 		let temp = next;
// 		next = prev + next;
// 		prev = temp;
// 	}
// 	return prev;
// }

// alert(fib(77));
